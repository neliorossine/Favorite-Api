version: '3.8'

services:

  # API FastAPI
  api:
    build: .
    command: uvicorn app.main:create_app --host 0.0.0.0 --port 8010
    ports:
      - "8010:8010"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      RABBITMQ_URL: ${RABBITMQ_URL}
    volumes:
      - .:/app

  # Banco de dados PostgreSQL
  db:
    image: postgres:13.3
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: aiqfome
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d aiqfome"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis opcional (para cache ou filas futuras)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: always

  # RabbitMQ com interface de gerenciamento
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Worker ass√≠ncrono que consome mensagens do RabbitMQ
  consumer:
    build: .
    command: python app/queue/consumer.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: ${DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    volumes:
      - .:/app

volumes:
  postgres_data:
